# Generated from Pladcl.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,148,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,4,3,43,8,3,11,3,12,3,44,1,4,3,4,48,8,4,1,4,1,4,4,4,52,8,4,11,4,
        12,4,53,1,5,1,5,4,5,58,8,5,11,5,12,5,59,1,5,1,5,1,6,1,6,4,6,66,8,
        6,11,6,12,6,67,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,3,7,85,8,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        14,1,14,5,14,126,8,14,10,14,12,14,129,9,14,1,14,1,14,1,15,3,15,134,
        8,15,1,15,3,15,137,8,15,1,15,4,15,140,8,15,11,15,12,15,141,1,16,
        4,16,145,8,16,11,16,12,16,146,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,
        7,2,0,9,9,32,32,1,0,34,34,1,0,96,96,2,0,60,60,62,62,2,0,10,10,13,
        13,1,0,48,57,3,0,65,90,95,95,97,122,164,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,
        35,1,0,0,0,3,37,1,0,0,0,5,39,1,0,0,0,7,42,1,0,0,0,9,51,1,0,0,0,11,
        55,1,0,0,0,13,63,1,0,0,0,15,84,1,0,0,0,17,86,1,0,0,0,19,90,1,0,0,
        0,21,99,1,0,0,0,23,105,1,0,0,0,25,115,1,0,0,0,27,118,1,0,0,0,29,
        123,1,0,0,0,31,133,1,0,0,0,33,144,1,0,0,0,35,36,5,44,0,0,36,2,1,
        0,0,0,37,38,5,40,0,0,38,4,1,0,0,0,39,40,5,41,0,0,40,6,1,0,0,0,41,
        43,7,0,0,0,42,41,1,0,0,0,43,44,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,
        0,45,8,1,0,0,0,46,48,5,13,0,0,47,46,1,0,0,0,47,48,1,0,0,0,48,49,
        1,0,0,0,49,52,5,10,0,0,50,52,5,13,0,0,51,47,1,0,0,0,51,50,1,0,0,
        0,52,53,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,10,1,0,0,0,55,57,
        5,34,0,0,56,58,8,1,0,0,57,56,1,0,0,0,58,59,1,0,0,0,59,57,1,0,0,0,
        59,60,1,0,0,0,60,61,1,0,0,0,61,62,5,34,0,0,62,12,1,0,0,0,63,65,5,
        96,0,0,64,66,8,2,0,0,65,64,1,0,0,0,66,67,1,0,0,0,67,65,1,0,0,0,67,
        68,1,0,0,0,68,69,1,0,0,0,69,70,5,96,0,0,70,14,1,0,0,0,71,72,5,61,
        0,0,72,85,5,61,0,0,73,74,5,33,0,0,74,85,5,61,0,0,75,85,7,3,0,0,76,
        77,5,62,0,0,77,85,5,61,0,0,78,79,5,60,0,0,79,85,5,61,0,0,80,81,5,
        33,0,0,81,85,5,62,0,0,82,83,5,33,0,0,83,85,5,60,0,0,84,71,1,0,0,
        0,84,73,1,0,0,0,84,75,1,0,0,0,84,76,1,0,0,0,84,78,1,0,0,0,84,80,
        1,0,0,0,84,82,1,0,0,0,85,16,1,0,0,0,86,87,5,101,0,0,87,88,5,110,
        0,0,88,89,5,100,0,0,89,18,1,0,0,0,90,91,5,102,0,0,91,92,5,117,0,
        0,92,93,5,110,0,0,93,94,5,99,0,0,94,95,5,116,0,0,95,96,5,105,0,0,
        96,97,5,111,0,0,97,98,5,110,0,0,98,20,1,0,0,0,99,100,5,115,0,0,100,
        101,5,116,0,0,101,102,5,97,0,0,102,103,5,116,0,0,103,104,5,101,0,
        0,104,22,1,0,0,0,105,106,5,105,0,0,106,107,5,110,0,0,107,108,5,116,
        0,0,108,109,5,101,0,0,109,110,5,114,0,0,110,111,5,114,0,0,111,112,
        5,117,0,0,112,113,5,112,0,0,113,114,5,116,0,0,114,24,1,0,0,0,115,
        116,5,105,0,0,116,117,5,102,0,0,117,26,1,0,0,0,118,119,5,116,0,0,
        119,120,5,104,0,0,120,121,5,101,0,0,121,122,5,110,0,0,122,28,1,0,
        0,0,123,127,5,35,0,0,124,126,8,4,0,0,125,124,1,0,0,0,126,129,1,0,
        0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,1,0,
        0,0,130,131,6,14,0,0,131,30,1,0,0,0,132,134,5,45,0,0,133,132,1,0,
        0,0,133,134,1,0,0,0,134,136,1,0,0,0,135,137,3,7,3,0,136,135,1,0,
        0,0,136,137,1,0,0,0,137,139,1,0,0,0,138,140,7,5,0,0,139,138,1,0,
        0,0,140,141,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,32,1,0,0,
        0,143,145,7,6,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,
        0,146,147,1,0,0,0,147,34,1,0,0,0,14,0,44,47,51,53,59,67,84,127,133,
        136,141,144,146,1,6,0,0
    ]

class PladclLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    WHITESPACE = 4
    NEWLINE = 5
    STRING_LITERAL = 6
    DC_LITERAL = 7
    COMPARISONS = 8
    END = 9
    FUNCTION = 10
    STATE = 11
    INTERRUPT = 12
    IF = 13
    THEN = 14
    COMMENT = 15
    INTEGER_LITERAL = 16
    IDENTIFIER = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "'('", "')'", "'end'", "'function'", "'state'", "'interrupt'", 
            "'if'", "'then'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "NEWLINE", "STRING_LITERAL", "DC_LITERAL", "COMPARISONS", 
            "END", "FUNCTION", "STATE", "INTERRUPT", "IF", "THEN", "COMMENT", 
            "INTEGER_LITERAL", "IDENTIFIER" ]

    ruleNames = [ "T__0", "T__1", "T__2", "WHITESPACE", "NEWLINE", "STRING_LITERAL", 
                  "DC_LITERAL", "COMPARISONS", "END", "FUNCTION", "STATE", 
                  "INTERRUPT", "IF", "THEN", "COMMENT", "INTEGER_LITERAL", 
                  "IDENTIFIER" ]

    grammarFileName = "Pladcl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


