# Generated from Pladcl.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,119,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,1,0,1,0,1,1,1,1,1,2,1,2,1,3,4,3,37,8,3,11,3,12,3,38,1,4,
        3,4,42,8,4,1,4,1,4,4,4,46,8,4,11,4,12,4,47,1,5,1,5,4,5,52,8,5,11,
        5,12,5,53,1,5,1,5,1,6,1,6,4,6,60,8,6,11,6,12,6,61,1,6,1,6,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        5,11,97,8,11,10,11,12,11,100,9,11,1,11,1,11,1,12,3,12,105,8,12,1,
        12,3,12,108,8,12,1,12,4,12,111,8,12,11,12,12,12,112,1,13,4,13,116,
        8,13,11,13,12,13,117,0,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,1,0,6,2,0,9,9,32,32,1,0,34,34,1,
        0,96,96,2,0,10,10,13,13,1,0,48,57,3,0,65,90,95,95,97,122,129,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,31,1,0,
        0,0,5,33,1,0,0,0,7,36,1,0,0,0,9,45,1,0,0,0,11,49,1,0,0,0,13,57,1,
        0,0,0,15,65,1,0,0,0,17,69,1,0,0,0,19,78,1,0,0,0,21,84,1,0,0,0,23,
        94,1,0,0,0,25,104,1,0,0,0,27,115,1,0,0,0,29,30,5,44,0,0,30,2,1,0,
        0,0,31,32,5,40,0,0,32,4,1,0,0,0,33,34,5,41,0,0,34,6,1,0,0,0,35,37,
        7,0,0,0,36,35,1,0,0,0,37,38,1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,
        39,8,1,0,0,0,40,42,5,13,0,0,41,40,1,0,0,0,41,42,1,0,0,0,42,43,1,
        0,0,0,43,46,5,10,0,0,44,46,5,13,0,0,45,41,1,0,0,0,45,44,1,0,0,0,
        46,47,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,10,1,0,0,0,49,51,5,
        34,0,0,50,52,8,1,0,0,51,50,1,0,0,0,52,53,1,0,0,0,53,51,1,0,0,0,53,
        54,1,0,0,0,54,55,1,0,0,0,55,56,5,34,0,0,56,12,1,0,0,0,57,59,5,96,
        0,0,58,60,8,2,0,0,59,58,1,0,0,0,60,61,1,0,0,0,61,59,1,0,0,0,61,62,
        1,0,0,0,62,63,1,0,0,0,63,64,5,96,0,0,64,14,1,0,0,0,65,66,5,101,0,
        0,66,67,5,110,0,0,67,68,5,100,0,0,68,16,1,0,0,0,69,70,5,102,0,0,
        70,71,5,117,0,0,71,72,5,110,0,0,72,73,5,99,0,0,73,74,5,116,0,0,74,
        75,5,105,0,0,75,76,5,111,0,0,76,77,5,110,0,0,77,18,1,0,0,0,78,79,
        5,115,0,0,79,80,5,116,0,0,80,81,5,97,0,0,81,82,5,116,0,0,82,83,5,
        101,0,0,83,20,1,0,0,0,84,85,5,105,0,0,85,86,5,110,0,0,86,87,5,116,
        0,0,87,88,5,101,0,0,88,89,5,114,0,0,89,90,5,114,0,0,90,91,5,117,
        0,0,91,92,5,112,0,0,92,93,5,116,0,0,93,22,1,0,0,0,94,98,5,35,0,0,
        95,97,8,3,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,
        0,0,0,99,101,1,0,0,0,100,98,1,0,0,0,101,102,6,11,0,0,102,24,1,0,
        0,0,103,105,5,45,0,0,104,103,1,0,0,0,104,105,1,0,0,0,105,107,1,0,
        0,0,106,108,3,7,3,0,107,106,1,0,0,0,107,108,1,0,0,0,108,110,1,0,
        0,0,109,111,7,4,0,0,110,109,1,0,0,0,111,112,1,0,0,0,112,110,1,0,
        0,0,112,113,1,0,0,0,113,26,1,0,0,0,114,116,7,5,0,0,115,114,1,0,0,
        0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,28,1,0,0,0,
        13,0,38,41,45,47,53,61,98,104,107,112,115,117,1,6,0,0
    ]

class PladclLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    WHITESPACE = 4
    NEWLINE = 5
    STRING_LITERAL = 6
    DC_LITERAL = 7
    END = 8
    FUNCTION = 9
    STATE = 10
    INTERRUPT = 11
    COMMENT = 12
    INTEGER_LITERAL = 13
    IDENTIFIER = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "'('", "')'", "'end'", "'function'", "'state'", "'interrupt'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "NEWLINE", "STRING_LITERAL", "DC_LITERAL", "END", 
            "FUNCTION", "STATE", "INTERRUPT", "COMMENT", "INTEGER_LITERAL", 
            "IDENTIFIER" ]

    ruleNames = [ "T__0", "T__1", "T__2", "WHITESPACE", "NEWLINE", "STRING_LITERAL", 
                  "DC_LITERAL", "END", "FUNCTION", "STATE", "INTERRUPT", 
                  "COMMENT", "INTEGER_LITERAL", "IDENTIFIER" ]

    grammarFileName = "Pladcl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


