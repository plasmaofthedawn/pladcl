# Generated from Pladcl.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,232,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,4,3,69,8,3,11,3,12,3,70,1,4,3,4,74,8,4,1,4,1,4,4,4,78,8,4,11,4,
        12,4,79,1,5,1,5,4,5,84,8,5,11,5,12,5,85,1,5,1,5,1,6,1,6,4,6,92,8,
        6,11,6,12,6,93,1,6,1,6,1,7,1,7,1,7,1,7,1,8,3,8,103,8,8,1,8,3,8,106,
        8,8,1,8,4,8,109,8,8,11,8,12,8,110,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,3,9,126,8,9,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
        1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,4,28,220,8,28,11,28,12,28,
        221,1,29,1,29,5,29,226,8,29,10,29,12,29,229,9,29,1,29,1,29,0,0,30,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,1,0,7,2,0,9,9,32,32,1,0,34,34,
        1,0,96,96,1,0,48,57,2,0,60,60,62,62,3,0,65,90,95,95,97,122,2,0,10,
        10,13,13,248,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,1,61,1,0,0,0,3,63,1,0,0,0,5,65,1,0,0,0,7,68,1,0,0,0,9,77,
        1,0,0,0,11,81,1,0,0,0,13,89,1,0,0,0,15,97,1,0,0,0,17,102,1,0,0,0,
        19,125,1,0,0,0,21,127,1,0,0,0,23,131,1,0,0,0,25,140,1,0,0,0,27,146,
        1,0,0,0,29,156,1,0,0,0,31,159,1,0,0,0,33,164,1,0,0,0,35,171,1,0,
        0,0,37,177,1,0,0,0,39,180,1,0,0,0,41,186,1,0,0,0,43,190,1,0,0,0,
        45,193,1,0,0,0,47,196,1,0,0,0,49,201,1,0,0,0,51,207,1,0,0,0,53,211,
        1,0,0,0,55,214,1,0,0,0,57,219,1,0,0,0,59,223,1,0,0,0,61,62,5,40,
        0,0,62,2,1,0,0,0,63,64,5,41,0,0,64,4,1,0,0,0,65,66,5,44,0,0,66,6,
        1,0,0,0,67,69,7,0,0,0,68,67,1,0,0,0,69,70,1,0,0,0,70,68,1,0,0,0,
        70,71,1,0,0,0,71,8,1,0,0,0,72,74,5,13,0,0,73,72,1,0,0,0,73,74,1,
        0,0,0,74,75,1,0,0,0,75,78,5,10,0,0,76,78,5,13,0,0,77,73,1,0,0,0,
        77,76,1,0,0,0,78,79,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,10,1,
        0,0,0,81,83,5,34,0,0,82,84,8,1,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,
        83,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,87,88,5,34,0,0,88,12,1,0,
        0,0,89,91,5,96,0,0,90,92,8,2,0,0,91,90,1,0,0,0,92,93,1,0,0,0,93,
        91,1,0,0,0,93,94,1,0,0,0,94,95,1,0,0,0,95,96,5,96,0,0,96,14,1,0,
        0,0,97,98,5,39,0,0,98,99,9,0,0,0,99,100,5,39,0,0,100,16,1,0,0,0,
        101,103,5,45,0,0,102,101,1,0,0,0,102,103,1,0,0,0,103,105,1,0,0,0,
        104,106,3,7,3,0,105,104,1,0,0,0,105,106,1,0,0,0,106,108,1,0,0,0,
        107,109,7,3,0,0,108,107,1,0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,
        110,111,1,0,0,0,111,18,1,0,0,0,112,113,5,61,0,0,113,126,5,61,0,0,
        114,115,5,33,0,0,115,126,5,61,0,0,116,126,7,4,0,0,117,118,5,62,0,
        0,118,126,5,61,0,0,119,120,5,60,0,0,120,126,5,61,0,0,121,122,5,33,
        0,0,122,126,5,62,0,0,123,124,5,33,0,0,124,126,5,60,0,0,125,112,1,
        0,0,0,125,114,1,0,0,0,125,116,1,0,0,0,125,117,1,0,0,0,125,119,1,
        0,0,0,125,121,1,0,0,0,125,123,1,0,0,0,126,20,1,0,0,0,127,128,5,101,
        0,0,128,129,5,110,0,0,129,130,5,100,0,0,130,22,1,0,0,0,131,132,5,
        102,0,0,132,133,5,117,0,0,133,134,5,110,0,0,134,135,5,99,0,0,135,
        136,5,116,0,0,136,137,5,105,0,0,137,138,5,111,0,0,138,139,5,110,
        0,0,139,24,1,0,0,0,140,141,5,115,0,0,141,142,5,116,0,0,142,143,5,
        97,0,0,143,144,5,116,0,0,144,145,5,101,0,0,145,26,1,0,0,0,146,147,
        5,105,0,0,147,148,5,110,0,0,148,149,5,116,0,0,149,150,5,101,0,0,
        150,151,5,114,0,0,151,152,5,114,0,0,152,153,5,117,0,0,153,154,5,
        112,0,0,154,155,5,116,0,0,155,28,1,0,0,0,156,157,5,105,0,0,157,158,
        5,102,0,0,158,30,1,0,0,0,159,160,5,116,0,0,160,161,5,104,0,0,161,
        162,5,101,0,0,162,163,5,110,0,0,163,32,1,0,0,0,164,165,5,114,0,0,
        165,166,5,101,0,0,166,167,5,116,0,0,167,168,5,117,0,0,168,169,5,
        114,0,0,169,170,5,110,0,0,170,34,1,0,0,0,171,172,5,119,0,0,172,173,
        5,104,0,0,173,174,5,105,0,0,174,175,5,108,0,0,175,176,5,101,0,0,
        176,36,1,0,0,0,177,178,5,100,0,0,178,179,5,111,0,0,179,38,1,0,0,
        0,180,181,5,98,0,0,181,182,5,114,0,0,182,183,5,101,0,0,183,184,5,
        97,0,0,184,185,5,107,0,0,185,40,1,0,0,0,186,187,5,102,0,0,187,188,
        5,111,0,0,188,189,5,114,0,0,189,42,1,0,0,0,190,191,5,105,0,0,191,
        192,5,110,0,0,192,44,1,0,0,0,193,194,5,116,0,0,194,195,5,111,0,0,
        195,46,1,0,0,0,196,197,5,115,0,0,197,198,5,116,0,0,198,199,5,101,
        0,0,199,200,5,112,0,0,200,48,1,0,0,0,201,202,5,115,0,0,202,203,5,
        116,0,0,203,204,5,97,0,0,204,205,5,99,0,0,205,206,5,107,0,0,206,
        50,1,0,0,0,207,208,5,97,0,0,208,209,5,110,0,0,209,210,5,100,0,0,
        210,52,1,0,0,0,211,212,5,111,0,0,212,213,5,114,0,0,213,54,1,0,0,
        0,214,215,5,110,0,0,215,216,5,111,0,0,216,217,5,116,0,0,217,56,1,
        0,0,0,218,220,7,5,0,0,219,218,1,0,0,0,220,221,1,0,0,0,221,219,1,
        0,0,0,221,222,1,0,0,0,222,58,1,0,0,0,223,227,5,35,0,0,224,226,8,
        6,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,
        0,0,0,228,230,1,0,0,0,229,227,1,0,0,0,230,231,6,29,0,0,231,60,1,
        0,0,0,14,0,70,73,77,79,85,93,102,105,110,125,219,221,227,1,6,0,0
    ]

class PladclLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    WHITESPACE = 4
    NEWLINE = 5
    STRING_LITERAL = 6
    DC_LITERAL = 7
    CHAR_LITERAL = 8
    INTEGER_LITERAL = 9
    COMPARISONS = 10
    END = 11
    FUNCTION = 12
    STATE = 13
    INTERRUPT = 14
    IF = 15
    THEN = 16
    RETURN = 17
    WHILE = 18
    DO = 19
    BREAK = 20
    FOR = 21
    IN = 22
    TO = 23
    STEP = 24
    STACK = 25
    AND = 26
    OR = 27
    NOT = 28
    IDENTIFIER = 29
    COMMENT = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "','", "'end'", "'function'", "'state'", "'interrupt'", 
            "'if'", "'then'", "'return'", "'while'", "'do'", "'break'", 
            "'for'", "'in'", "'to'", "'step'", "'stack'", "'and'", "'or'", 
            "'not'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "NEWLINE", "STRING_LITERAL", "DC_LITERAL", "CHAR_LITERAL", 
            "INTEGER_LITERAL", "COMPARISONS", "END", "FUNCTION", "STATE", 
            "INTERRUPT", "IF", "THEN", "RETURN", "WHILE", "DO", "BREAK", 
            "FOR", "IN", "TO", "STEP", "STACK", "AND", "OR", "NOT", "IDENTIFIER", 
            "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "WHITESPACE", "NEWLINE", "STRING_LITERAL", 
                  "DC_LITERAL", "CHAR_LITERAL", "INTEGER_LITERAL", "COMPARISONS", 
                  "END", "FUNCTION", "STATE", "INTERRUPT", "IF", "THEN", 
                  "RETURN", "WHILE", "DO", "BREAK", "FOR", "IN", "TO", "STEP", 
                  "STACK", "AND", "OR", "NOT", "IDENTIFIER", "COMMENT" ]

    grammarFileName = "Pladcl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


